// Mocks generated by Mockito 5.4.5 from annotations
// in itunes_music_app/test/features/songs/presentation/views/widgets/song_item_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:flutter_riverpod/flutter_riverpod.dart' as _i3;
import 'package:itunes_music_app/core/services/audio_player/audio_player_controller.dart'
    as _i8;
import 'package:itunes_music_app/core/services/audio_player/player_notifier.dart'
    as _i9;
import 'package:itunes_music_app/core/services/audio_player/player_state.dart'
    as _i4;
import 'package:itunes_music_app/features/cart/domain/entities/cart_entity.dart'
    as _i10;
import 'package:itunes_music_app/features/cart/presentation/states/cart_state.dart'
    as _i2;
import 'package:itunes_music_app/features/cart/presentation/view_models/cart_view_model.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:state_notifier/state_notifier.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCartState_0 extends _i1.SmartFake implements _i2.CartState {
  _FakeCartState_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRef_1<State extends Object?> extends _i1.SmartFake
    implements _i3.Ref<State> {
  _FakeRef_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePlayerState_2 extends _i1.SmartFake implements _i4.PlayerState {
  _FakePlayerState_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [CartViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockCartViewModel extends _i1.Mock implements _i5.CartViewModel {
  MockCartViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set onError(_i3.ErrorListener? _onError) => super.noSuchMethod(
    Invocation.setter(#onError, _onError),
    returnValueForMissingStub: null,
  );

  @override
  bool get mounted =>
      (super.noSuchMethod(Invocation.getter(#mounted), returnValue: false)
          as bool);

  @override
  _i6.Stream<_i2.CartState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i6.Stream<_i2.CartState>.empty(),
          )
          as _i6.Stream<_i2.CartState>);

  @override
  _i2.CartState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeCartState_0(this, Invocation.getter(#state)),
          )
          as _i2.CartState);

  @override
  set state(_i2.CartState? value) => super.noSuchMethod(
    Invocation.setter(#state, value),
    returnValueForMissingStub: null,
  );

  @override
  _i2.CartState get debugState =>
      (super.noSuchMethod(
            Invocation.getter(#debugState),
            returnValue: _FakeCartState_0(this, Invocation.getter(#debugState)),
          )
          as _i2.CartState);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i6.Future<void> getCartItems() =>
      (super.noSuchMethod(
            Invocation.method(#getCartItems, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> addToCart(String? songId) =>
      (super.noSuchMethod(
            Invocation.method(#addToCart, [songId]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> removeFromCart(String? songId) =>
      (super.noSuchMethod(
            Invocation.method(#removeFromCart, [songId]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> updateCartItemQuantity(String? songId, int? quantity) =>
      (super.noSuchMethod(
            Invocation.method(#updateCartItemQuantity, [songId, quantity]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> clearCart() =>
      (super.noSuchMethod(
            Invocation.method(#clearCart, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> toggleCartItem(String? songId) =>
      (super.noSuchMethod(
            Invocation.method(#toggleCartItem, [songId]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  bool updateShouldNotify(_i2.CartState? old, _i2.CartState? current) =>
      (super.noSuchMethod(
            Invocation.method(#updateShouldNotify, [old, current]),
            returnValue: false,
          )
          as bool);

  @override
  _i3.RemoveListener addListener(
    _i7.Listener<_i2.CartState>? listener, {
    bool? fireImmediately = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #addListener,
              [listener],
              {#fireImmediately: fireImmediately},
            ),
            returnValue: () {},
          )
          as _i3.RemoveListener);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [AudioPlayerController].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioPlayerController extends _i1.Mock
    implements _i8.AudioPlayerController {
  MockAudioPlayerController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Ref<Object?> get ref =>
      (super.noSuchMethod(
            Invocation.getter(#ref),
            returnValue: _FakeRef_1<Object?>(this, Invocation.getter(#ref)),
          )
          as _i3.Ref<Object?>);

  @override
  _i6.Future<void> play(String? songId, String? url, String? songTitle) =>
      (super.noSuchMethod(
            Invocation.method(#play, [songId, url, songTitle]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> pause() =>
      (super.noSuchMethod(
            Invocation.method(#pause, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> resume() =>
      (super.noSuchMethod(
            Invocation.method(#resume, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> stop() =>
      (super.noSuchMethod(
            Invocation.method(#stop, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [PlayerNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlayerNotifier extends _i1.Mock implements _i9.PlayerNotifier {
  MockPlayerNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set onError(_i3.ErrorListener? _onError) => super.noSuchMethod(
    Invocation.setter(#onError, _onError),
    returnValueForMissingStub: null,
  );

  @override
  bool get mounted =>
      (super.noSuchMethod(Invocation.getter(#mounted), returnValue: false)
          as bool);

  @override
  _i6.Stream<_i4.PlayerState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i6.Stream<_i4.PlayerState>.empty(),
          )
          as _i6.Stream<_i4.PlayerState>);

  @override
  _i4.PlayerState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakePlayerState_2(this, Invocation.getter(#state)),
          )
          as _i4.PlayerState);

  @override
  set state(_i4.PlayerState? value) => super.noSuchMethod(
    Invocation.setter(#state, value),
    returnValueForMissingStub: null,
  );

  @override
  _i4.PlayerState get debugState =>
      (super.noSuchMethod(
            Invocation.getter(#debugState),
            returnValue: _FakePlayerState_2(
              this,
              Invocation.getter(#debugState),
            ),
          )
          as _i4.PlayerState);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  void play(String? songId) => super.noSuchMethod(
    Invocation.method(#play, [songId]),
    returnValueForMissingStub: null,
  );

  @override
  void pause() => super.noSuchMethod(
    Invocation.method(#pause, []),
    returnValueForMissingStub: null,
  );

  @override
  void resume() => super.noSuchMethod(
    Invocation.method(#resume, []),
    returnValueForMissingStub: null,
  );

  @override
  void stop() => super.noSuchMethod(
    Invocation.method(#stop, []),
    returnValueForMissingStub: null,
  );

  @override
  bool updateShouldNotify(_i4.PlayerState? old, _i4.PlayerState? current) =>
      (super.noSuchMethod(
            Invocation.method(#updateShouldNotify, [old, current]),
            returnValue: false,
          )
          as bool);

  @override
  _i3.RemoveListener addListener(
    _i7.Listener<_i4.PlayerState>? listener, {
    bool? fireImmediately = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #addListener,
              [listener],
              {#fireImmediately: fireImmediately},
            ),
            returnValue: () {},
          )
          as _i3.RemoveListener);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [CartState].
///
/// See the documentation for Mockito's code generation for more information.
class MockCartState extends _i1.Mock implements _i2.CartState {
  MockCartState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i10.CartEntity> get cartItems =>
      (super.noSuchMethod(
            Invocation.getter(#cartItems),
            returnValue: <_i10.CartEntity>[],
          )
          as List<_i10.CartEntity>);

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);

  @override
  int get totalItems =>
      (super.noSuchMethod(Invocation.getter(#totalItems), returnValue: 0)
          as int);

  @override
  _i2.CartState copyWith({List<_i10.CartEntity>? cartItems, bool? isLoading}) =>
      (super.noSuchMethod(
            Invocation.method(#copyWith, [], {
              #cartItems: cartItems,
              #isLoading: isLoading,
            }),
            returnValue: _FakeCartState_0(
              this,
              Invocation.method(#copyWith, [], {
                #cartItems: cartItems,
                #isLoading: isLoading,
              }),
            ),
          )
          as _i2.CartState);

  @override
  bool isInCart(String? songId) =>
      (super.noSuchMethod(
            Invocation.method(#isInCart, [songId]),
            returnValue: false,
          )
          as bool);
}
